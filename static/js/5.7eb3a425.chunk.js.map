{"version":3,"sources":["assets/images/user.png","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/NewMessage.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["module","exports","__webpack_require__","p","dialogs","dialogs__items","messages","messages__control","new__message","dialog","active","date","user__photo","user__name","unreaded","message__wrapper","message","message__info","author","time","my","unviewed","selected","DialogItem","props","react_default","a","createElement","Object","defineProperty","className","styles","id","onClick","getDialogMessages","activeDialog","concat","src","photos","small","user","alt","userName","hasNewMessages","newMessagesCount","Date","lastDialogActivityDate","toLocaleDateString","Message","viewed","recipientId","isSelected","selectMessage","react_router_dom","to","senderId","senderName","addedAt","body","maxLength100","maxLengthCreator","NewMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","NewMessage","formData","sendMessage","dialogId","Dialogs","dialogsElements","map","Dialogs_DialogItem_DialogItem","assign","key","messagesElements","Dialogs_Message_Message","selectedMessages","includes","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","ref","length","forEach","removeMessage","spamMessage","Dialogs_NewMessage","DialogsContainer","_this","this","getDialogs","then","Fragment","Preloader","isFetching","components_Dialogs_Dialogs","React","Component","compose","connect","state","dialogsPage","withAuthRedirect","withRouter"],"mappings":"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","file":"static/js/5.7eb3a425.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.44a5c053.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__12UMW\",\"dialogs__items\":\"Dialogs_dialogs__items__1-9OH\",\"messages\":\"Dialogs_messages__3iAfy\",\"messages__control\":\"Dialogs_messages__control__xfhjE\",\"new__message\":\"Dialogs_new__message__PNZLV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__jCvld\",\"active\":\"DialogItem_active__3_aSe\",\"date\":\"DialogItem_date__vvbjx\",\"user__photo\":\"DialogItem_user__photo__19kHY\",\"user__name\":\"DialogItem_user__name__3SMSK\",\"unreaded\":\"DialogItem_unreaded__1PeQL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message__wrapper\":\"Message_message__wrapper__3Z_Uo\",\"message\":\"Message_message__1uRZh\",\"message__info\":\"Message_message__info__C7_PY\",\"author\":\"Message_author__3Nsut\",\"time\":\"Message_time__1pNJJ\",\"my\":\"Message_my__24d0M\",\"unviewed\":\"Message_unviewed__3MJZe\",\"selected\":\"Message_selected__2GaaA\"};","import React from 'react';\r\nimport styles from './DialogItem.module.css';\r\nimport user from '../../../assets/images/user.png'\r\nconst DialogItem = (props) => {\r\n    const onDialogSelected = () => {\r\n        props.getDialogMessages(props.id);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialog}\r\n            id = {props.id} \r\n            onClick = { onDialogSelected }\r\n            className = {props.id === props.activeDialog ? `${styles.active} ${styles.dialog}` : styles.dialog}>\r\n                <img className={ styles.user__photo } src={props.photos.small ? props.photos.small : user} alt=\"user\" />\r\n                <span className={ styles.user__name }>{props.userName} </span>\r\n                {props.hasNewMessages && <span className={styles.unreaded}>{props.newMessagesCount}</span> }\r\n                <span className={styles.date}>{new Date(props.lastDialogActivityDate).toLocaleDateString('en')}</span>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport styles from './Message.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nconst Message = (props) => {\r\n    const onMessageSelected = () => {\r\n        props.selectMessage(props.id);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.message__wrapper} >\r\n            <div \r\n                id={props.id} \r\n                className = {`\r\n                    ${styles.message} \r\n                    ${ props.viewed ? '' : styles.unviewed } \r\n                    ${ props.recipientId === props.activeDialog ? styles.my : '' }\r\n                    ${ props.isSelected ? styles.selected : '' }`}\r\n                onClick={onMessageSelected}>\r\n                <div className = {styles.message__info}>\r\n                    <NavLink to={'/profile' + props.senderId} className = {styles.author}>{props.senderName}</NavLink>\r\n                    <div className = {styles.time}>{new Date(props.addedAt).toLocaleDateString()}</div>\r\n                </div>\r\n                {props.body}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {reduxForm, Field} from 'redux-form';\r\nimport styles from './Dialogs.module.css';\r\nimport { maxLengthCreator, requiredField } from '../../utils/validators/validators';\r\nimport { Textarea } from '../common/FormControls/FormControls';\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\nconst NewMessageForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field \r\n            component={Textarea}\r\n            name=\"body\" \r\n            placeholder=\"Enter whatever you want to say\" \r\n            validate={[requiredField, maxLength100]}\r\n        />\r\n        <button>Send</button>\r\n    </form>;\r\n\r\n}\r\nconst NewMessageReduxForm = reduxForm({form: 'newMessage'})(NewMessageForm);\r\n\r\nconst NewMessage = (props) => {\r\n    const onSubmitMessage = (formData) => {\r\n        props.sendMessage(props.dialogId, formData);\r\n    }\r\n    return <div className={ styles.new__message }><NewMessageReduxForm onSubmit={onSubmitMessage} dialogId={props.dialogId}/></div>\r\n}\r\n\r\nexport default NewMessage;","import React, { useEffect, useRef } from 'react';\r\nimport styles from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport NewMessage from './NewMessage';\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogsElements = props.dialogs.map( dialog => {\r\n        return (\r\n            <DialogItem \r\n                key = {dialog.id} \r\n                {...dialog}\r\n                getDialogMessages = {props.getDialogMessages}\r\n                activeDialog = {props.activeDialog}\r\n            />);\r\n    });\r\n    const messagesElements = props.messages.map( message => {\r\n        return (\r\n            <Message \r\n            key = {message.id} \r\n            {...message}\r\n            isSelected = {props.selectedMessages.includes(message.id)}\r\n            activeDialog = {props.activeDialog}\r\n            selectMessage = {props.selectMessage}\r\n            />\r\n        );\r\n    });\r\n\r\n    const messagesEndRef = useRef(null);\r\n    const scrollToBottom = () => {\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n    const onMessageRemove = () => {\r\n        props.selectedMessages.forEach(message => {\r\n            props.removeMessage(message, props.activeDialog);\r\n        });\r\n    }\r\n    const onMessageSpam = () => {\r\n        props.selectedMessages.forEach(message => {\r\n            props.spamMessage(message.id, props.activeDialog);\r\n        });\r\n    }\r\n    useEffect(scrollToBottom, [messagesElements]);\r\n\r\n    return (\r\n        <div className = {styles.dialogs}> \r\n            <div className = {styles.dialogs__items}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className = {styles.messages}>        \r\n                { messagesElements }    \r\n                <div ref={ messagesEndRef } /> \r\n                { props.selectedMessages.length > 0 && <div className={styles.messages__control}>\r\n                    <button onClick={ onMessageRemove }>Remove</button>\r\n                    <button onClick= {onMessageSpam }>Spam</button>\r\n                </div>  \r\n                }\r\n                <NewMessage sendMessage={props.sendMessage} dialogId={props.activeDialog} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport { sendMessage, getDialogs, getDialogMessages, selectMessage, removeMessage, spamMessage } from '../../redux/dialogsReducer';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\nclass DialogsContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getDialogs().then(() => {\r\n            if(this.props.dialogs.length > 0) this.props.getDialogMessages(this.props.dialogs[0].id);\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return  <>\r\n            <Preloader isFetching={this.props.isFetching}/>\r\n            <Dialogs { ...this.props }/>\r\n        </>;\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        activeDialog: state.dialogsPage.activeDialog,\r\n        selectedMessages: state.dialogsPage.selectedMessages,\r\n        isFetching:  state.dialogsPage.isFetching, \r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, \r\n    { \r\n        sendMessage: sendMessage, \r\n        getDialogs: getDialogs,\r\n        getDialogMessages: getDialogMessages,\r\n        selectMessage: selectMessage,\r\n        removeMessage: removeMessage,\r\n        spamMessage: spamMessage\r\n    }),\r\n    withAuthRedirect,\r\n    withRouter\r\n)(DialogsContainer);"],"sourceRoot":""}